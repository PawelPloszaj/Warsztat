@page "/edit-mechanic/{id:int}"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject MechanicService MechanicService
@inject NavigationManager Navigation

<h3>Edit Mechanic</h3>

@if (errorMessage != null)
{
    <p style="color: red">@errorMessage</p>
}

@if (mechanic == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <label>First Name:</label>
        <input @bind="mechanic.FirstName" />
    </div>
    <div>
        <label>Last Name:</label>
        <input @bind="mechanic.LastName" />
    </div>
    <button @onclick="SaveMechanic">Save</button>
    <button @onclick="@(() => Navigation.NavigateTo("/mechanics"))">Cancel</button>
}

@code {
    [Parameter] public int? Id { get; set; }
    private MechanicDto? mechanic;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            errorMessage = "Invalid mechanic ID.";
            return;
        }

        try
        {
            mechanic = await MechanicService.GetMechanicByIdAsync(Id.Value);
            if (mechanic == null)
            {
                errorMessage = "Mechanic not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading mechanic: {ex.Message}";
        }
    }

    private async Task SaveMechanic()
    {
        errorMessage = null;

        if (mechanic == null)
        {
            errorMessage = "No mechanic data to save.";
            return;
        }

        if (string.IsNullOrWhiteSpace(mechanic.FirstName))
        {
            errorMessage = "First name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(mechanic.LastName))
        {
            errorMessage = "Last name is required.";
            return;
        }

        try
        {
            await MechanicService.UpdateMechanicAsync(mechanic);
            Navigation.NavigateTo("/mechanics");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating mechanic: {ex.Message}";
        }
    }
}
