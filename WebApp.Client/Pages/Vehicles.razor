@page "/vehicles"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject VehicleService VehicleService
@inject NavigationManager Navigation

<h3>Vehicles</h3>

<div class="header-container">
    <button class="add-button" @onclick="@(() => Navigation.NavigateTo("/add-vehicle"))">+</button>
</div>

<input type="text" placeholder="Search by brand or model..." @bind="SearchTerm" @bind:event="onchange" />

@if (vehicles == null)
{
    <p>Loading...</p>
}
else if (vehicles.Count == 0)
{
    <p>No vehicles available.</p>
}
else
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>Brand</th>
                <th>Model</th>
                <th>License Plate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in FilteredVehicles)
            {
                <tr>
                    <td>@vehicle.Brand</td>
                    <td>@vehicle.Model</td>
                    <td>@vehicle.LicensePlate</td>
                    <td>
                        <button @onclick="@(() => Navigation.NavigateTo($"/history/{vehicle.Id}"))">History</button>
                        <button @onclick="@(() => Navigation.NavigateTo($"/edit-vehicle/{vehicle.Id}"))">Edit</button>
                        <button class="delete-button" @onclick="@(() => DeleteVehicle(vehicle.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<VehicleDto>? vehicles;
    private List<VehicleDto>? filteredVehicles;
    private string searchTerm = "";

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterVehicles();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadVehicles();
    }

    private async Task LoadVehicles()
    {
        try
        {
            vehicles = await VehicleService.GetVehiclesAsync();
            FilterVehicles();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching vehicles: {ex.Message}");
        }
    }

    private async Task DeleteVehicle(int id)
    {
        try
        {
            await VehicleService.DeleteVehicleAsync(id);
            await LoadVehicles();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting vehicle: {ex.Message}");
        }
    }

    private void FilterVehicles()
    {
        if (vehicles == null)
        {
            filteredVehicles = new List<VehicleDto>();
            return;
        }

        filteredVehicles = vehicles
            .Where(v => v.Brand.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                        v.Model.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                        v.LicensePlate.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private List<VehicleDto> FilteredVehicles => filteredVehicles ?? new List<VehicleDto>();
}