@page "/repairorders"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject RepairOrderService RepairOrderService
@inject VehicleService VehicleService
@inject NavigationManager Navigation

<h3>Repair Orders</h3>

<div class="header-container">
    <button class="add-button" @onclick="@(() => Navigation.NavigateTo("/add-repairorder"))">+</button>
</div>

<!-- Filtry -->
<div>
    <label>Status:</label>
    <select @bind="SelectedStatus">
        <option value="">All</option>
        <option value="Open">Open</option>
        <option value="In Progress">In Progress</option>
        <option value="Completed">Completed</option>
    </select>

    <label>Start Date:</label>
    <input type="datetime" placeholder="yyyy-MM-dd HH:mm" @bind="SelectedDateString" />
</div>

@if (filteredOrders == null)
{
    <p>Loading...</p>
}
else if (filteredOrders.Count == 0)
{
    <p>No repair orders match the criteria.</p>
}
else
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Vehicle</th>
                <th>Status</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in FilteredOrders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@GetVehicleRegistrationNumber(order.VehicleId)</td>
                    <td>@order.Status</td>
                    <td>@order.StartDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@(order.EndDate.HasValue ? order.EndDate.Value.ToString("yyyy-MM-dd HH:mm") : "Not Set")</td>
                    <td>
                        <button @onclick="@(() => Navigation.NavigateTo($"/edit-repairorder/{order.Id}"))">Edit</button>
                        <button class="delete-button" @onclick="@(() => DeleteRepairOrder(order.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RepairOrderDto>? repairOrders;
    private List<RepairOrderDto>? filteredOrders;
    private List<VehicleDto> vehicles = new();

    private string selectedStatus = "";
    private DateTime? selectedDate;

    private string SelectedStatus
    {
        get => selectedStatus;
        set
        {
            selectedStatus = value;
            FilterOrders();
        }
    }

    private string SelectedDateString
    {
        get => selectedDate.HasValue ? selectedDate.Value.ToString("yyyy-MM-ddTHH:mm") : "";
        set
        {
            if (DateTime.TryParse(value, out var parsedDate))
            {
                selectedDate = parsedDate;
            }
            else
            {
                selectedDate = null;
            }
            FilterOrders();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRepairOrders();
    }

    private async Task LoadRepairOrders()
    {
        try
        {
            repairOrders = await RepairOrderService.GetRepairOrdersAsync();
            vehicles = await VehicleService.GetVehiclesAsync();
            FilterOrders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private string GetVehicleRegistrationNumber(int vehicleId)
    {
        var vehicle = vehicles.FirstOrDefault(v => v.Id == vehicleId);
        return vehicle != null
            ? $"ID:{vehicle.Id} - {vehicle.Brand} {vehicle.Model} ({vehicle.Year}) - {vehicle.LicensePlate}"
            : "Unknown Vehicle";
    }

    private void FilterOrders()
    {
        if (repairOrders == null)
        {
            filteredOrders = new List<RepairOrderDto>();
            return;
        }

        filteredOrders = repairOrders
            .Where(o => (string.IsNullOrEmpty(SelectedStatus) || o.Status.Equals(SelectedStatus, StringComparison.OrdinalIgnoreCase)) &&
                        (!selectedDate.HasValue || o.StartDate >= selectedDate.Value))
            .ToList();
    }

    private List<RepairOrderDto> FilteredOrders => filteredOrders ?? new List<RepairOrderDto>();

    private async Task DeleteRepairOrder(int id)
    {
        try
        {
            await RepairOrderService.DeleteRepairOrderAsync(id);
            await LoadRepairOrders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting RepairOrder: {ex.Message}");
        }
    }
}
