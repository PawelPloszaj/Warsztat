@page "/parts"
@using WebApp.Shared.Dto
@using WebApp.Client.Services
@inject PartService PartService
@inject NavigationManager Navigation

<h3>Parts</h3>

<div class="header-container">
    <button class="add-button" @onclick="@(() => Navigation.NavigateTo("/add-part"))">+</button>
</div>

@if (parts == null)
{
    <p>Loading...</p>
}
else if (parts.Count == 0)
{
    <p>No parts available.</p>
}
else
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Manufacturer</th>
                <th>Price</th>
                <th>Repair ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var part in parts)
            {
                <tr>
                    <td>@part.Id</td>
                    <td>@part.Name</td>
                    <td>@part.Manufacturer</td>
                    <td>@part.Price PLN</td>
                    <td>@part.RepairId</td>
                    <td>
                        <button @onclick="() => EditPart(part.Id)">Edit</button>
                        <button class="delete-button" @onclick="() => DeletePart(part.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PartDto>? parts;

    protected override async Task OnInitializedAsync()
    {
        parts = await PartService.GetPartsAsync();
    }

    private void EditPart(int id)
    {
        Navigation.NavigateTo($"edit-part/{id}");
    }

    private async Task DeletePart(int id)
    {
        try
        {
            await PartService.DeletePartAsync(id);
            parts = await PartService.GetPartsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting part: {ex.Message}");
        }
    }
}
