@page "/mechanics"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject MechanicService MechanicService
@inject NavigationManager Navigation

<h3>Mechanics</h3>

<div class="header-container">
    <button class="add-button" @onclick="@(() => Navigation.NavigateTo("/add-mechanic"))">+</button>
</div>

@if (mechanics == null)
{
    <p>Loading...</p>
}
else if (mechanics.Count == 0)
{
    <p>No mechanics available.</p>
}
else
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Assigned Repairs</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var mechanic in mechanics)
            {
                <tr>
                    <td>@mechanic.FirstName</td>
                    <td>@mechanic.LastName</td>
                    <td>
                        @if (repairsByMechanic.TryGetValue(mechanic.Id, out var repairList) && repairList.Any())
                        {
                            <ul>
                                @foreach (var repair in repairList)
                                {
                                    <li>@repair.Description (@repair.RepairDate.ToShortDateString())</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span>No assigned repairs</span>
                        }
                    </td>
                    <td>
                        <button @onclick="@(() => Navigation.NavigateTo($"/edit-mechanic/{mechanic.Id}"))">Edit</button>
                        <button class="delete-button" @onclick="() => DeleteMechanic(mechanic.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MechanicDto>? mechanics;
    private Dictionary<int, List<RepairDto>> repairsByMechanic = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMechanics();
    }

    private async Task LoadMechanics()
    {
        try
        {
            mechanics = await MechanicService.GetMechanicsAsync();

            repairsByMechanic = await MechanicService.GetRepairsByMechanicAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching mechanics: {ex.Message}");
        }
    }

    private async Task DeleteMechanic(int id)
    {
        try
        {
            await MechanicService.DeleteMechanicAsync(id);
            await LoadMechanics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting mechanic: {ex.Message}");
        }
    }
}
