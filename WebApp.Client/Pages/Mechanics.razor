@page "/mechanics"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject MechanicService MechanicService
@inject NavigationManager Navigation

<h3>Mechanics</h3>

@if (mechanics == null)
{
    <p>Loading...</p>
}
else if (mechanics.Count == 0)
{
    <p>No mechanics available.</p>
}
else
{
    <ul>
        @foreach (var mechanic in mechanics)
        {
            <li>
                @mechanic.FirstName @mechanic.LastName
                <button @onclick="@(() => Navigation.NavigateTo($"/edit-mechanic/{mechanic.Id}"))">Edit</button>
                <button @onclick="@(() => DeleteMechanic(mechanic.Id))">Delete</button>
            </li>
        }
    </ul>
}

<h3>Add Mechanic</h3>
<div>
    <label>First Name:</label>
    <input @bind="newMechanic.FirstName" />
</div>
<div>
    <label>Last Name:</label>
    <input @bind="newMechanic.LastName" />
</div>

<button @onclick="AddMechanic">Save</button>

@code {
    private List<MechanicDto>? mechanics;
    private MechanicDto newMechanic = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMechanics();
    }

    private async Task LoadMechanics()
    {
        try
        {
            mechanics = await MechanicService.GetMechanicsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching mechanics: {ex.Message}");
        }
    }

    private async Task AddMechanic()
    {
        if (string.IsNullOrWhiteSpace(newMechanic.FirstName) || string.IsNullOrWhiteSpace(newMechanic.LastName))
        {
            Console.WriteLine("First name and last name are required.");
            return;
        }

        try
        {
            await MechanicService.AddMechanicAsync(newMechanic);
            newMechanic = new();
            await LoadMechanics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding mechanic: {ex.Message}");
        }
    }

    private async Task DeleteMechanic(int id)
    {
        try
        {
            await MechanicService.DeleteMechanicAsync(id);
            await LoadMechanics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting mechanic: {ex.Message}");
        }
    }
}
