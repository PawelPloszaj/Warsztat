@page "/edit-repair/{id:int}"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject RepairService RepairService
@inject NavigationManager Navigation

<h3>Edit Repair</h3>

@if (errorMessage != null)
{
    <p style="color: red">@errorMessage</p>
}

@if (repair == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <label>Description:</label>
        <input @bind="repair.Description" />
    </div>
    <div>
        <label>Repair Date:</label>
        <input type="datetime-local" @bind="repair.RepairDate" />
    </div>
    <div>
        <label>Cost:</label>
        <input type="number" step="0.01" @bind="repair.Cost" />
    </div>

    <button @onclick="SaveRepair">Save</button>
    <button @onclick="@(() => Navigation.NavigateTo("/repairs"))">Cancel</button>
}

@code {
    [Parameter] public int Id { get; set; }
    private RepairDto? repair;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            repair = await RepairService.GetRepairByIdAsync(Id);
            if (repair == null)
            {
                errorMessage = "Repair not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repair: {ex.Message}";
        }
    }

    private async Task SaveRepair()
    {
        errorMessage = null;

        if (repair == null)
        {
            errorMessage = "No repair data to save.";
            return;
        }

        if (string.IsNullOrWhiteSpace(repair.Description))
        {
            errorMessage = "Description is required.";
            return;
        }

        if (repair.Cost <= 0)
        {
            errorMessage = "Cost must be greater than 0.";
            return;
        }

        try
        {
            await RepairService.UpdateRepairAsync(repair);
            Navigation.NavigateTo("/repairs");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating repair: {ex.Message}";
        }
    }
}
