@page "/edit-vehicle/{id:int}"
@using WebApp.Shared.Dto
@using WebApp.Client.Services
@inject VehicleService VehicleService
@inject ClientService ClientService
@inject NavigationManager Navigation

<h3>Edit Vehicle</h3>

@if (errorMessage != null)
{
    <p style="color: red">@errorMessage</p>
}

@if (vehicle == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <label>License Plate:</label>
        <input @bind="vehicle.LicensePlate" />
    </div>
    <div>
        <label>Brand:</label>
        <input @bind="vehicle.Brand" />
    </div>
    <div>
        <label>Model:</label>
        <input @bind="vehicle.Model" />
    </div>
    <div>
        <label>Year:</label>
        <input type="number" @bind="vehicle.Year" />
    </div>
    <div>
        <label>Client:</label>
        <select @bind="vehicle.ClientId">
            <option value="0">-- Select Client --</option>
            @foreach (var client in clients)
            {
                <option value="@client.Id">@client.FirstName @client.LastName</option>
            }
        </select>
    </div>

    <button @onclick="SaveVehicle">Save</button>
}

@code {
    [Parameter] public int? Id { get; set; }
    private VehicleDto? vehicle;
    private List<ClientDto> clients = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            errorMessage = "Invalid vehicle ID.";
            return;
        }

        try
        {
            vehicle = await VehicleService.GetVehicleByIdAsync(Id.Value);
            clients = await ClientService.GetClientsAsync();
            if (vehicle == null)
            {
                errorMessage = "Vehicle not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading vehicle: {ex.Message}";
        }
    }

    private async Task SaveVehicle()
    {
        errorMessage = null;

        if (vehicle == null)
        {
            errorMessage = "No vehicle data to save.";
            return;
        }

        if (string.IsNullOrWhiteSpace(vehicle.LicensePlate))
        {
            errorMessage = "License plate is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(vehicle.Brand))
        {
            errorMessage = "Brand is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(vehicle.Model))
        {
            errorMessage = "Model is required.";
            return;
        }

        if (vehicle.Year <= 0)
        {
            errorMessage = "Year must be valid.";
            return;
        }

        try
        {
            await VehicleService.UpdateVehicleAsync(vehicle);
            Navigation.NavigateTo("/vehicles");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating vehicle: {ex.Message}";
        }
    }
}
