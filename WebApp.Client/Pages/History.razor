@page "/history/{vehicleId:int}"
@using WebApp.Client.Services
@using WebApp.Shared.Dto
@inject HistoryService HistoryService
@inject NavigationManager Navigation

<h3>Repair Orders for Vehicle: @VehicleId</h3>

@if (repairOrders == null)
{
    <p>Loading...</p>
}
else if (repairOrders.Count == 0)
{
    <p>No repair orders available for this vehicle.</p>
}
else
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Status</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in repairOrders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.Status</td>
                    <td>@order.StartDate.ToShortDateString()</td>
                    <td>@(order.EndDate.HasValue ? order.EndDate.Value.ToShortDateString() : "Not Set")</td>
                    <td>
                        <button @onclick="() => ViewRepairs(order.Id)">View Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedRepairOrderId.HasValue)
{
    <h3>Repairs for RepairOrder: @selectedRepairOrderId</h3>

    @if (repairs == null)
    {
        <p>Loading...</p>
    }
    else if (repairs.Count == 0)
    {
        <p>No repairs found for this order.</p>
    }
    else
    {
        <table class="styled-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Description</th>
                    <th>Repair Date</th>
                    <th>Cost</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var repair in repairs)
                {
                    <tr>
                        <td>@repair.Id</td>
                        <td>@repair.Description</td>
                        <td>@repair.RepairDate.ToShortDateString()</td>
                        <td>@repair.Cost PLN</td>
                        <td>
                            <button @onclick="() => ViewParts(repair.Id)">View Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (selectedRepairId.HasValue)
{
    <h3>Parts for Repair: @selectedRepairId</h3>

    @if (parts == null)
    {
        <p>Loading...</p>
    }
    else if (parts.Count == 0)
    {
        <p>No parts found for this repair.</p>
    }
    else
    {
        <table class="styled-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Manufacturer</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var part in parts)
                {
                    <tr>
                        <td>@part.Id</td>
                        <td>@part.Name</td>
                        <td>@part.Manufacturer</td>
                        <td>@part.Price PLN</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<button @onclick="@(() => Navigation.NavigateTo("/vehicles"))">Back to Vehicles</button>

@code {
    [Parameter] public int? VehicleId { get; set; }

    private List<RepairOrderDto>? repairOrders;
    private List<RepairDto>? repairs;
    private List<PartDto>? parts;

    private int? selectedRepairOrderId;
    private int? selectedRepairId;

    protected override async Task OnInitializedAsync()
    {
        if (VehicleId == null)
        {
            Navigation.NavigateTo("/vehicles");
            return;
        }

        try
        {
            repairOrders = await HistoryService.GetRepairOrdersForVehicleAsync(VehicleId.Value);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading repair orders: {ex.Message}");
            Navigation.NavigateTo("/vehicles");
        }
    }

    private async Task ViewRepairs(int repairOrderId)
    {
        selectedRepairOrderId = repairOrderId;
        repairs = await HistoryService.GetRepairsForRepairOrderAsync(repairOrderId);
        selectedRepairId = null;
        parts = null;
    }

    private async Task ViewParts(int repairId)
    {
        selectedRepairId = repairId;
        parts = await HistoryService.GetPartsForRepairAsync(repairId);
    }
}
