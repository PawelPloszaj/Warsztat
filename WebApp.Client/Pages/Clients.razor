@page "/clients"
@using WebApp.Shared.Dto
@using WebApp.Client.Services
@inject ClientService ClientService
@inject NavigationManager Navigation

<h3>Clients</h3>

<div class="header-container">
    <button class="add-button" @onclick="@(() => Navigation.NavigateTo("/add-client"))">+</button>
</div>

@if (clients == null)
{
    <p>Loading...</p>
}
else if (clients.Count == 0)
{
    <p>No clients available.</p>
}
else
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.Id</td>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Phone</td>
                    <td>
                        <button @onclick="@(() => Navigation.NavigateTo($"/edit-client/{client.Id}"))">Edit</button>
                        <button class="delete-button" @onclick="() => DeleteClient(client.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ClientDto>? clients;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        try
        {
            clients = await ClientService.GetClientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching clients: {ex.Message}");
        }
    }

    private async Task DeleteClient(int id)
    {
        try
        {
            await ClientService.DeleteClientAsync(id);
            await LoadClients();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting client: {ex.Message}");
        }
    }
}
